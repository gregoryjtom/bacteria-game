CS32 Project 3 Report1. A high-level description of each of your public member functions in each of your classes, and why you chose to define each member function in its host class; also explain why (or why not) you decided to make each function virtual or pure virtual. For example, “I chose to define a pure virtual version of the sneeze() function in my base Actor class because all actors in Kontagion are able to sneeze, and each type of actor sneezes in a different way.” Below is a summary of the relevant functions in each of the classes:- StudentWorld:o addActor* Push an actor onto the list.o generateWithinBounds* Generate a coordinate within the bounds of game.o generateAroundCircum* Generate a coordinate around the circumference of the grid of the game.o isOverlap* Check if there is a overlap. Has the option to check for either movement overlap or regular overlap.o isBacteriumMovementBlockedAt* Check if a bacterium can move to a certain location.o ActOnFirstActable* Damage/eat the first object that overlaps with the actor and is able to be damaged/eaten. o getAngleToNearestNearbyEdible* Get the angle to the nearest food object that is within 128 pixels.o getAngleToNearbySocrates* Get the angle to Socrates if he is within a certain number of pixels.o socOverlap* Check if the actor overlaps with Socrates.- Actor (for non trivial functions):o Pure virtual doSomething* This function is pure virtual because an actor does not do something in and of itself, only the derivative classes will do something.o virtual isEdible* By default, virtual sets this as false, but for the food derivative class it makes it true.o virtual blocksBacteriumMovement* By default, virtual sets this as false, but for the dirt derivative class it makes it true.o pure virtual damageObject* This function is pure virtual because it depends on whether a class is binary or health to how it gets damaged, getting damaged is a general feature of the actors.- Healtho Pure virtual soundWhenHurt* A health class does not make a certain sound when hurt and one should not be able to make a health object.o Pure virtual soundWhenDead* Similar to above.o Virtual scoreIncrease* Returns whether the death of this actor causes a score increase. True by default in virtual but is false in Socrates derived class.- Bacteriumo Pure Virtual doBacteriumSpecific* Each derived class has a different specific action in its doSomething, so this is where this is held.o Virtual doAggressive* This is nothing by default but in the aggressive salmonella class, it senses whether Socrates is nearby.o Pure virtual damageToSoc* Each bacterium causes different number of damage to socrateso Pure virtual addNewOfType* Each bacterium has its own mechanism to add another of its type.- Dirto blockBacteriumMovement* True- Foodo isEdible* True- Weapono weaponMoveForward* Move forward a certain amount.- Goodieo Pickup* Perform sound and actions respective to goodieso doGoodieSpecific* Do the goodie specific action.2. A list of all functionality that you failed to finish as well as known bugs in your classes, e.g. “I didn’t implement the Flame class.” or “My aggressive salmonella doesn’t work correctly yet so I treat it like a regular salmonella right now.” The only known bug in the program is that the score on the top only shows the number of digits as regular. I could not figure out how to get the score to have 6 digits all the time. 3. A list of other design decisions and assumptions you made; e.g., “It was not specified what to do in situation X, so this is what I decided to do.”First, it was not given what class hierarchy to use, so I chose the one that follows:GraphObject	Actor		Health 			Socrates			Bacterium				EColi				Salmonella					RegularSalmonella					AggressiveSalmonella		Binary			Dirt			Pit			Food			Weapon				Flame       Spray			Goodie				RestoreHealth				FlamethrowerGoodie				ExtraLifeGoodie				Fungus			I decided to break up the actors into Health and Binary based on whether they have health points or are just alive or dead. I did this because it would affect how it gets damaged and disappears. I also generalized Flame and Spray into Weapons and the goodies all into one class. I found it especially helpful to put the Bacterium all into one class because the doSomething() function had a lot of similarities between them.It was not given what actor to choose if there are multiple that overlap. Therefore, I decided to choose to act on the first eligible actor in the order of the list that I used to store all the actors. As well, it was not given how to ensure that the bacterium that is emitted from the Pit is randomly chosen. This was difficult because you cannot choose one random number out of 3 to choose which to emit because there might not be any more of one type of Bacterium. Therefore, I devised a method that checks first what types have no more in stock and then chooses a random integer according to this data.4. A description of how you tested each of your classes (1-2 paragraphs per class).StudentWorld: I tested each of the control inputs (q, left, right, etc.) and made sure it did the correct action and direction. I also tested the initialization and whether actors where deleted and inserted when they should be. As well, I made sure that level changes and overlap was appropriate and everything moved in the right direction. Lastly, I confirmed that StudentWorld constructed and deleted objects without memory leaks with verification in XCode. I also checked that the top level of text updated correctly with each move.Socrates: I made sure that Socrates could be damaged appropriately and that it was initialized appropriately with the correct amount of spray, flames, health, etc. I checked to make sure that the keyboard inputs corresponded to the right action. I also made sure that its location was tracked appropriately with the emission of weapons and such.Bacterium: I checked that the Bacteria moved appropriately in response to Food locations and Socrates location. I also checked to make sure that the regular Salmonella moved straight unless it was blocked by dirt or the radius. I checked to make sure that EColi followed Socrates around the grid. I checked to make sure that Aggressive Salmonella only followed Socrates at close distances.Dirt: I made sure that it got deleted when overlap with a weapon occurred, and made sure that they were added to the grid with the correct number and random location. Food: I made sure that the correct number were created and that they were not overlapping. I made sure that they were deleted when overlapped with Bacterium.Weapon: I checked that they were emitted from Socrates correctly and actually harmed all damageable objects. I made sure that they were deleted after causing the correct amount of damage.Goodie: I checked that the goodies caused the desired effect on Socrates and were correctly placed on the circumference of the grid. I also made sure that the goodie was deleted after overlap. 